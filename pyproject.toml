[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codesight"
version = "1.0.0"
description = "AI-powered reverse engineering pipeline for legacy Java/Spring applications"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "NBCU Storm Team", email = "storm-team@nbcuni.com"}
]
maintainers = [
    {name = "NBCU Storm Team", email = "storm-team@nbcuni.com"}
]
keywords = [
    "reverse-engineering",
    "legacy-modernization", 
    "java-analysis",
    "spring-framework",
    "ai-powered",
    "ast-parsing",
    "code-analysis"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Java",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Archiving :: Mirroring"
]
requires-python = ">=3.8"
dependencies = [
    # Core dependencies
    "PyYAML>=6.0.1",
    # Pin NumPy to <2.0 to align with faiss-cpu constraints in most prebuilt binaries
    "numpy>=1.24.0,<2.0", 
    "chardet>=5.2.0",
    
    # SQL parsing
    "sqlparse>=0.4.4",
    
    # HTTP client libraries (for LLM integration)
    "httpx>=0.25.0",
    "requests>=2.31.0",
    
    # Additional data processing
    "pandas>=2.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
]

# Testing dependencies
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-cov>=4.1.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]

# Performance profiling
profiling = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

# Minimal dependencies for basic functionality
minimal = [
    "PyYAML>=6.0.1",
    "numpy>=1.24.0,<2.0",
    "chardet>=5.2.0",
    "pytest>=7.4.0",
]

# Flow orchestration (install PocketFlow from git)
flow = [
    "pocketflow @ git+https://github.com/The-Pocket/PocketFlow.git@v1.0.0"
]

# Embeddings (install faiss via pip where available; on Windows prefer conda)
embeddings = [
    "faiss-cpu>=1.8.0; platform_system != 'Windows'",
]

# Java parsing (JPype)
java = [
    "JPype1>=1.4.1",
]

# Complete set with all optional dependencies
full = [
    "codesight[dev,test,docs,profiling,flow,embeddings,java]",
]

[project.urls]
Homepage = "https://github.com/nbcu/codesight"
Documentation = "https://github.com/nbcu/codesight/blob/main/README.md"
Repository = "https://github.com/nbcu/codesight.git"
Issues = "https://github.com/nbcu/codesight/issues"

[project.scripts]
# Note: main.py is in root directory, not in src/
# For now, users should run: python main.py
# To fix this, either move main.py to src/ or create a proper entry point module

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["test*", "tests*", "*.tests*", "*.test*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.xml", "*.properties", "*.md"]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "-s", 
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "java: Tests requiring Java/JPype",
    "llm: Tests requiring LLM access",
    "embeddings: Tests requiring embedding generation",
]
pythonpath = ["src"]

# Code formatting with Black
[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  # auto-generated files
  | parsetab\\.py
)/
'''

# Import sorting with isort
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "test"]
known_first_party = [
    "config",
    "core", 
    "domain",
    "embeddings",
    "lex",
    "llm", 
    "parsers",
    "steps",
    "utils"
]

# Type checking with mypy
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
mypy_path = "src"
disable_error_code = ["line-too-long"]
exclude = [
    "test/test-projects/.*",
    ".*parsetab\\.py"
]

# Less strict for test files
[[tool.mypy.overrides]]
module = "test.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = [
    "JPype1.*",
    "faiss.*", 
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/test*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/parsetab.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["test", "tests", "test/test-projects"]
skips = ["B101", "B601"]

# Flake8 configuration (in setup.cfg or .flake8 file for better support)
# Note: flake8 doesn't support pyproject.toml natively yet